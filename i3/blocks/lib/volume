#!/usr/bin/python3

import re
from subprocess import run, PIPE
from enum import Enum


class Level(Enum):
    NORMAL = 1
    LOW = 2
    OFF = 3
    MUTED = 4


# Setting

MUTE_PAT = re.compile(r"^\s*Mute: (yes|no)")
VOL_PAT = re.compile(r"^\s*Volume: .* /\s* (\d+)%")
THRESHOLD = 20
TMPLS = {
    Level.NORMAL: "<span font='FontAwesome 10'>\uf028</span> {}%",
    Level.LOW: "<span font='FontAwesome 10'>\uf027</span> {}%",
    Level.OFF: "<span font='FontAwesome 10'>\uf026</span> {}%",
    Level.MUTED: "<span font='FontAwesome 10'>\uf6a9</span> {}%"
}


# Helper

def is_muted(lines):
    """Check if the audio device is muted."""
    for line in lines:
        result = MUTE_PAT.search(line)
        if result and result.group(1) == "yes":
            return True
    return False


def extract_volume(lines):
    """Extract the volume level."""
    for line in lines:
        result = VOL_PAT.search(line)
        if result:
            return int(result.group(1))
    return None


# Core

def get_raw():
    """Get the current volume information."""
    # TODO: Find a more reliable way.
    lines = run(["pactl", "list", "sinks"], encoding="utf-8",
                stdout=PIPE, check=True).stdout.splitlines()
    vol = extract_volume(lines)
    if vol is None:
        return None
    if is_muted(lines):
        return Level.MUTED, vol

    state = None
    if vol == 0:
        state = Level.OFF
    elif vol < THRESHOLD:
        state = Level.LOW
    else:
        state = Level.NORMAL
    return state, vol


def get_output():
    """Get a string for volume."""
    raw = get_raw()
    if raw is None:
        return None
    state, vol = raw
    tmpl = TMPLS.get(state)
    return tmpl.format(vol)


# Print

if __name__ == "__main__":
    try:
        output = get_output()
        if output:
            print(output)
    except KeyboardInterrupt:
        pass
