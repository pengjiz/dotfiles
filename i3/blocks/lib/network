#!/usr/bin/python3

import psutil as ps
import socket
import time
from enum import Enum


class State(Enum):
    WIFI = 1
    WIRED = 2
    OFFLINE = 3


# Setting

RETRY_LIMIT = 10
RETRY_INTERVAL = 1
UPDATE_INTERVAL = 10
PREFIXES = {
    "wl": State.WIFI,
    "en": State.WIRED
}
INET_AFS = [socket.AF_INET, socket.AF_INET6]
TMPLS = {
    State.WIFI: ("<span font='FontAwesome 10'>\uf1eb</span> "
                 "↓{:.1f}{}/s ↑{:.1f}{}/s"),
    State.WIRED: ("<span font='FontAwesome 10'>\uf6ff</span> "
                  "↓{:.1f}{}/s ↑{:.1f}{}/s"),
    State.OFFLINE: "<span font='FontAwesome 10'>\uf127</span>"
}


# Helper

def get_device_state(name):
    "Get the state for a device."
    for prefix, state in PREFIXES.items():
        if name.startswith(prefix):
            return state
    return State.OFFLINE


def has_inet_addr(addrs):
    """Test if the addresses contains an internet address."""
    for addr in addrs:
        if addr.family in INET_AFS:
            return True
    return False


def convert_bytes(num):
    """Convert bytes to a human-readable form."""
    units = {1024 ** 2: "M",
             1024: "K"}
    for base, unit in units.items():
        result = num / base
        if result >= 0.1:
            return result, unit
    return num, "B"


# Core

def get_inet_device():
    """Get the device with an internet connection."""
    addrs = ps.net_if_addrs()
    for name, addrs in addrs.items():
        state = get_device_state(name)
        if state is not State.OFFLINE and has_inet_addr(addrs):
            return name, state
    return None


def get_device_speed(name):
    """Get the IO speed of a device."""
    last_counters = ps.net_io_counters(pernic=True)
    last = last_counters.get(name)
    time.sleep(UPDATE_INTERVAL)
    this_counters = ps.net_io_counters(pernic=True)
    this = this_counters.get(name)

    if this and last:
        return {
            "in": convert_bytes((this.bytes_recv - last.bytes_recv) /
                                UPDATE_INTERVAL),
            "out": convert_bytes((this.bytes_sent - last.bytes_sent) /
                                 UPDATE_INTERVAL)
        }
    return None


def get_raw():
    """Get the current internet connection state and speed."""
    device = get_inet_device()
    if device:
        name, state = device
        return state, get_device_speed(name)
    time.sleep(UPDATE_INTERVAL)
    return State.OFFLINE, None


def get_output():
    """Get a string for network status."""
    state, spds = get_raw()
    tmpl = TMPLS.get(state)
    in_spd = spds.get("in") if spds else (0, "B")
    out_spd = spds.get("out") if spds else (0, "B")
    return tmpl.format(*in_spd, *out_spd)


# Print

if __name__ == "__main__":
    try:
        # NOTE: The connection may not be ready at the beginning so here we
        # wait for a while.
        retry_num = 0
        while retry_num < RETRY_LIMIT:
            if get_inet_device():
                break
            retry_num += 1
            time.sleep(RETRY_INTERVAL)

        while True:
            print(get_output(), flush=True)
    except KeyboardInterrupt:
        pass
